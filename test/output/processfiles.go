// generated by go2gen; DO NOT EDIT

package test

import (
	"os"
)

func process2(f *os.File) error {
	return nil
}

type User int

func (u User) Close() {}

func OpenUserInfo(s string) (User, error) {
	return 0, nil
}

type Error struct {
	Func string
	User string
	Path string
	Err  error
}

func (e *Error) Error() string {
	return ""
}

func ProcessFiles(user string, files chan string) error {
	e := Error{Func: "ProcessFile", User: user}
	_go2User0, _go2error0 := OpenUserInfo(user)
	if _go2error0 != nil {
		e.Err = _go2error0
		return &e
	}
	u := _go2User0
	defer u.Close()
	for file := range files {
		_go2ptrFile0, _go2error0 := os.Open(file)
		if _go2error0 != nil {
			e.Path = file
			e.Err = _go2error0
			return &e
		}
		_go2error1 := process2(_go2ptrFile0)
		if _go2error1 != nil {
			e.Path = file
			e.Err = _go2error1
			return &e
		}
	}
	return nil
}
